{"version":3,"sources":["components/Header.js","components/PtoGeneralInfo.js","store/actionConstants.js","components/Form.js","store/actions.js","components/PtoEntry.js","components/List.js","components/PtoEntries.js","components/App.js","store/store.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","PtoGeneralInfo","lastEntry","this","props","entries","length","lastEntryBeforeToday","today","Date","getTime","forEach","entry","endDate","earnedBalance","Math","round","projectedBalance","toLocaleDateString","rollover","accrualRate","connect","state","actionConstants","ADD_PTO_ENTRY","ConnectedForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","startDate","description","hoursRequested","handleChange","bind","assertThisInitialized","handleSubmit","firstDate","secondDate","date1","date2","timeDiff","abs","ceil","event","setState","defineProperty","target","id","value","daysBetween","preventDefault","_this$state","used","uuidv1","addPtoEntry","credit","_this$state2","onSubmit","htmlFor","type","onChange","Form","dispatch","payload","PtoEntry","components_Form","List","_ref","map","key","PtoEntries","components_List","App","components_Header","components_PtoGeneralInfo","components_PtoEntry","components_PtoEntries","defaultState","initialPTOEntry","push","i","month","acrrualEntry","store","createStore","arguments","undefined","action","objectSpread","toConsumableArray","concat","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.b565b4e9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n   \r\n   render() {\r\n       return (\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-12\">\r\n                    <h1 className=\"app-header\">React PTO Tracker</h1>\r\n                </div>\r\n            </div>\r\n        ); \r\n    }\r\n};\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return { \r\n        rollover: state.rollover,\r\n        accrualRate: state.accrualRate,\r\n        entries: state.entries\r\n    };\r\n};\r\n\r\nclass PtoGeneralInfo extends Component {\r\n\r\n   render() {\r\n       \r\n       const lastEntry = this.props.entries[this.props.entries.length-1];\r\n       let lastEntryBeforeToday = this.props.entries[0];\r\n       let today = new Date().getTime();\r\n       this.props.entries.forEach(entry =>{\r\n            if(today > new Date(entry.endDate).getTime()){\r\n                lastEntryBeforeToday = entry;\r\n            }\r\n       });\r\n       const earnedBalance = Math.round(lastEntryBeforeToday.earnedBalance *100)/100;\r\n       const projectedBalance = Math.round(lastEntry.projectedBalance*100)/100;\r\n       return (\r\n           <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <label>Today: </label>\r\n                        {new Date().toLocaleDateString()}\r\n                    </div>\r\n                    <div className=\"col-md-4 middle\">\r\n                        <label>2018 Rollover: </label>\r\n                        {this.props.rollover}\r\n                    </div>\r\n                    <div className=\"col-md-4 last\">\r\n                        <label>Accrual Rate: </label>\r\n                        {Math.round(this.props.accrualRate*100)/100}\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <label>Projected Accrual: </label>\r\n                        {this.props.accrualRate * 12}\r\n                    </div>\r\n                    <div className=\"col-md-4 middle\">\r\n                        <label>Earned PTO: </label>\r\n                        {earnedBalance}\r\n                    </div>\r\n                    <div className=\"col-md-4 last\">\r\n                        <label>Projected PTO: </label>\r\n                        {projectedBalance}\r\n                    </div>\r\n                </div>\r\n           </div>\r\n        \r\n        ); \r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps) (PtoGeneralInfo);","\r\nconst actionConstants = {\r\n    ADD_PTO_ENTRY: 'ADD_PTO_ENTRY'\r\n};\r\nexport default actionConstants; ","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport uuidv1 from \"uuid\";\r\nimport { addPtoEntry } from \"../store/actions\";\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addPtoEntry: entry => dispatch(addPtoEntry(entry))\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { entries: state.entries };\r\n};\r\n\r\nclass ConnectedForm extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      startDate: \"\",\r\n      endDate: \"\",\r\n      description: \"\",\r\n      hoursRequested: 0.00,\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  daysBetween(firstDate, secondDate){\r\n    let date1 = new Date(firstDate).getTime();\r\n    let date2 = new Date(secondDate).getTime();\r\n    let timeDiff = Math.abs(date2 - date1);\r\n    const dayInMS = 1000*3600*24;\r\n    return Math.ceil(timeDiff/dayInMS);\r\n  }\r\n  handleChange(event) {\r\n    this.setState({ [event.target.id]: event.target.value });\r\n    if(this.state.endDate && this.state.startDate){\r\n      let hoursRequested = this.daysBetween(this.state.startDate, this.state.endDate);\r\n      this.setState({hoursRequested: hoursRequested})\r\n    }\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    const { startDate, endDate, description, hoursRequested } = this.state;\r\n    const credit = 0;\r\n    const used = hoursRequested;\r\n    const id = uuidv1();\r\n    let lastEntry = {\r\n      earnedBalance: 0,\r\n      projectedBalance: 0\r\n    }\r\n    if(this.props.entries.length > 0){\r\n      lastEntry = this.props.entries[this.props.entries.length -1];\r\n    }\r\n    let earnedBalance = lastEntry.earnedBalance - used;\r\n    let projectedBalance = lastEntry.projectedBalance - used;\r\n    this.props.addPtoEntry({ id, startDate, endDate, description, used, credit, earnedBalance, projectedBalance });\r\n    this.setState(\r\n      { \r\n        startDate: \"\",\r\n        endDate: \"\",\r\n        description: \"\",\r\n        hoursRequested: 0.00\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { startDate, endDate, description, hoursRequested } = this.state;\r\n\r\n    return (\r\n       <form onSubmit={this.handleSubmit}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3 \">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"startDate\">Start Date</label>\r\n              <input\r\n                type=\"dateTime\"\r\n                className=\"form-control\"\r\n                id=\"startDate\"\r\n                value={startDate}\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-3 \">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"endDate\">End Date</label>\r\n              <input\r\n                type=\"dateTime\"\r\n                className=\"form-control\"\r\n                id=\"endDate\"\r\n                value={endDate}\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-3 \">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"description\">Description</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"description\"\r\n                value={description}\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-3 \">\r\n            <button type=\"submit\" className=\"submit-pto-entry btn btn-success btn-lg form-control\">\r\n              Request {hoursRequested} Hours\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst Form = connect(mapStateToProps, mapDispatchToProps)(ConnectedForm);\r\n\r\nexport default Form;","import actionConstants from './actionConstants';\r\nexport const addPtoEntry = entry => ({ type: actionConstants.ADD_PTO_ENTRY, payload: entry });","import React, { Component } from 'react';\r\nimport Form from './Form';\r\n\r\nclass PtoEntry extends Component {\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-12 \">\r\n                        <h3>Add a PTO Entry</h3>\r\n                    </div>\r\n                </div>\r\n                <Form />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PtoEntry;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return { entries: state.entries };\r\n};\r\n\r\nconst ConnectedList = ({ entries }) => {\r\n    const today = new Date().getTime();\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n                <div className=\"row pto-entries-header\">\r\n                    <div className=\"col-md-2\">\r\n                        Start Date\r\n                    </div>\r\n                    <div className=\"col-md-2\">\r\n                        End Date\r\n                    </div>\r\n                    <div className=\"col-md-2\">\r\n                        Description\r\n                    </div>\r\n                    <div className=\"col-md-1\">\r\n                        Used\r\n                    </div>\r\n                    <div className=\"col-md-1\">\r\n                        Credit\r\n                    </div>\r\n                    <div className=\"col-md-2\">\r\n                        Earned Balance\r\n                    </div>\r\n                    <div className=\"col-md-2\">\r\n                        Projected Balance\r\n                    </div>\r\n                </div>\r\n                {entries.map(entry => (\r\n                    <div className={\"row pto-entries-row \" + (entry.used > 0 ? ' pto-entries-used-pto-row' : '') \r\n                    + (new Date(entry.endDate).getTime() > today ? ' pto-entries-future-pto-row' : '')} key={entry.id}>\r\n                        <div className=\"col-md-2\">\r\n                            {entry.startDate}\r\n                        </div>\r\n                        <div className=\"col-md-2\">\r\n                            {entry.endDate}\r\n                        </div>\r\n                        <div className=\"col-md-2\">\r\n                            {entry.description}\r\n                        </div>\r\n                        <div className=\"col-md-1\">\r\n                            {Math.round(entry.used*100)/100}\r\n                        </div>\r\n                        <div className=\"col-md-1\">\r\n                            {Math.round(entry.credit*100)/100}\r\n                        </div>\r\n                        <div className=\"col-md-2\">\r\n                            {Math.round(entry.earnedBalance*100)/100}\r\n                        </div>\r\n                        <div className=\"col-md-2\">\r\n                            {Math.round(entry.projectedBalance*100)/100}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst List = connect(mapStateToProps) (ConnectedList);\r\n\r\nexport default List;\r\n","import React, { Component } from 'react';\r\nimport List from './List';\r\n\r\nclass PtoEntries extends Component {\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div className=\"row mt-3\">\r\n                    <div className=\"col-md-12 \">\r\n                        <h3>Pto Entries</h3>\r\n                    </div>\r\n                </div>\r\n                <List/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PtoEntries;","import React, { Component } from 'react';\n\n\nimport Header from './Header';\nimport PtoGeneralInfo from './PtoGeneralInfo';\nimport PtoEntry from './PtoEntry';\nimport PtoEntries from './PtoEntries';\n\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n\n        <PtoGeneralInfo />\n\n        <PtoEntry />\n\n        <PtoEntries />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { createStore } from 'redux';\r\nimport actionConstants from './actionConstants';\r\nimport uuidv1 from \"uuid\";\r\n\r\nconst defaultState = { \r\n    rollover: 38.82,\r\n    accrualRate: (20 * 8)/12,\r\n    entries: []\r\n};\r\n\r\nif(defaultState.rollover > 0){\r\n    const initialPTOEntry = {\r\n      id: uuidv1(),\r\n      startDate: new Date('01/01/19').toLocaleDateString(),\r\n      endDate: new Date('01/01/19').toLocaleDateString(),\r\n      description: \"2019 Initial Balance\",\r\n      used: 0.00,\r\n      credit: defaultState.rollover,\r\n      earnedBalance: defaultState.rollover,\r\n      projectedBalance:(defaultState.accrualRate * 12) + defaultState.rollover\r\n    }\r\n    defaultState.entries.push(initialPTOEntry);\r\n}\r\nfor(let i = 1; i <= 12; i++){\r\n    let month = i < 10 ? \"0\" + i : i;\r\n    const acrrualEntry = {\r\n        id: uuidv1(),\r\n        startDate: new Date(month + \"/01/19\").toLocaleDateString(),\r\n        endDate: new Date(month + \"/01/19\").toLocaleDateString(),\r\n        description: month + \"/01/19 Acrrual\",\r\n        used: 0.00,\r\n        credit: defaultState.accrualRate,\r\n        earnedBalance: defaultState.entries[defaultState.entries.length-1].earnedBalance + defaultState.accrualRate,\r\n        projectedBalance: defaultState.entries[defaultState.entries.length-1].projectedBalance\r\n      }\r\n      defaultState.entries.push(acrrualEntry);\r\n}\r\n\r\n\r\nconst reducer = function (state = defaultState, action) {\r\n    switch(action.type) {\r\n        case actionConstants.ADD_PTO_ENTRY:\r\n         return { ...state, entries: [...state.entries, action.payload] };\r\n        default:\r\n         return state;\r\n    }\r\n};\r\n\r\nconst store = createStore(reducer);\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { Provider } from 'react-redux';\n\nimport App from './components/App';\nimport store from './store/store';\n\nReactDOM.render(\n    \n    <Provider store={store}>\n        <App />\n    </Provider>, \n\n    document.getElementById('root')\n);\n"],"sourceRoot":""}